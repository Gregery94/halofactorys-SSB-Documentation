halofactory's SSB64 Camera Notes - 
tehzz's camera notes: https://github.com/tehzz/SSB64-Notes/blob/master/Battle/Quick%20Notes/camera%20notes.txt
ssb remix src: https://github.com/JSsixtyfour/smashremix/blob/master/src/Camera.asm

Address 0x80131460 contains pointer to the active camera_object. (0x8013A150 for PAL version)

camera_object {
	00 - u32 	// object id? =0x03EA
	04 - ptr  	// (hud struct)
	08 - ptr  	// (bg image struct)
	18 - ptr 	// (camera_struct >> 0x118)
	1C - ptr 	// (camera_struct >> 0x118)
	20 - ptr 	// (hud struct)
	24 - ptr 	// (bg image struct)
	2C - ptr 	// (routine seems to draw 3D world @ 0x8010D4C0)

	34 - u32 	// draw buffer? used by 800309B0.
	38 - u32	// if 0, current buffer not drawn

	74 - ptr 	// (camera_position_struct)
	7C - u32 skip_draw // set to 1 to skip rendering with this object
	8C - ptr 	// (camera_struct)
	
	// these change the scale/draw distance of the 3d world matrix + hud
	90 - u16 	// draw_x_size 	(=600)
	92 - u16 	// draw_y_size 	(=440)
	94 - unused
	
	// these offset where the camera viewport is drawn on screen
	98 - u16 	// draw_x_offset 	(=640)
	9A - u16 	// draw_y_offset 	(=480)
	9C - unused
	
	A4 - u16 	// unknown 
	A8 - f32 	// zoom
	AC - f32 	// horizonal stretch (radians?) I think it is written to 0x80046FA0
	
	B0 - f32 	// unknown 			(=256.0, affects what gets drawn?)
	B4 - f32 	// unknown 			(=39936.0, affects what gets drawn?)
	B8 - f32 	// vertex_precision  		(=1.0, lowering this value affects vertex snapping)
	BC - f32 	// ??
	
	// camera coordinates (I got it from the remix teams notes);
	C4 - f32 	// x_from
	C8 - f32 	// y_from
	CC - f32 	// z_from
	D0 - f32 	// x_to
	D4 - f32 	// y_to
	D8 - f32 	// z_to
	
	// camera roll is determined here.
	DC - f32 	// z_rotation_intial (=0.0. takes values between -512 and 512. either adding or subtracting 90 degrees)
	E0 - f32 	// z_rotation_sign ? (adds 180 degrees if sign of value = -1.)
	E4 - f32 	// z_rotation_camera_limit (always=0? sets upper limit of additive camera rotation when players are moving)
	
	E8 - u32 	// 3d doesn't draw if toggles
	EC - ptr 	// ( camera_struct >> 0x140)
	
	// There might be a better way to describe these next two;
	108 - u32 // draw_fill (=4, setting to 2 will clear the background with the color set in the next word)
	10C - u32 // draw_fill_color (rrggbbaa, default is null (black))
	
	120 - ptr // (camera_struct << 0x24) idk what this is yet
	
	134 - ptr // (routine that runs camera duration subroutine @ 8010CECC from global camera struct. you can also replace this with the camera mode you wish to run)
	
	// more to be looked at and documented
}

Multiple camera objects may exist at the same time.
make 2 cams:
1. set break point at 0x8010DB1C
2. load a stage
3. when hit, set PC to 0x8010DB00 and continue
4. you will both camera_objects beside eachother. You can resize the viewports and assign different camera subroutines to them as well.
